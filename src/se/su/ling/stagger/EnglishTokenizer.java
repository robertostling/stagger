/* The following code was generated by JFlex 1.4.3 on 11/24/13 1:26 AM */

package se.su.ling.stagger;
import java.util.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/24/13 1:26 AM from the specification file
 * <tt>EnglishTokenizer.flex</tt>
 */
public class EnglishTokenizer extends Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\13\2\0\1\12\22\0\1\100\1\50\1\53\1\26"+
    "\1\35\1\27\1\26\1\34\1\44\1\40\1\53\1\27\1\47\1\25"+
    "\1\24\1\22\1\16\1\101\1\102\1\43\6\16\1\6\1\32\1\42"+
    "\1\37\1\46\1\51\1\30\2\31\1\74\1\5\1\71\1\21\1\77"+
    "\1\17\1\4\3\31\1\75\1\72\1\36\1\20\1\31\1\76\1\2"+
    "\1\3\1\73\1\31\1\23\1\31\1\45\1\31\1\1\1\26\1\10"+
    "\1\41\1\7\1\53\2\31\1\74\1\5\1\71\1\21\1\77\1\17"+
    "\1\4\3\31\1\75\1\72\1\36\1\20\1\31\1\76\1\2\1\3"+
    "\1\73\1\31\1\23\1\33\1\45\1\31\3\53\1\26\6\0\1\14"+
    "\32\0\1\11\37\53\27\56\1\53\37\56\1\53\210\56\u01f0\0\220\57"+
    "\u0200\0\140\60\12\61\206\60\12\61\6\60\120\0\60\60\u0180\0\146\62"+
    "\12\63\20\62\146\0\12\15\166\0\12\15\166\0\12\15\166\0\12\15"+
    "\167\0\11\15\166\0\12\15\166\0\12\15\166\0\12\15\340\0\12\15"+
    "\166\0\12\15\106\0\12\15\u0116\0\12\15\266\0\u0100\65\u0169\0\11\15"+
    "\u046e\0\12\15\46\0\12\15\u012c\0\12\15\u0380\0\60\62\u0200\0\u0100\57"+
    "\16\11\2\0\6\52\22\53\2\55\33\53\u0fbb\0\1\54\37\53\40\0"+
    "\300\64\60\0\140\65\u0270\0\u19c0\66\100\0\u5200\66\u08e0\0\40\62\140\0"+
    "\40\65\u2e30\0\120\65\100\70\60\67\u0790\70\u1b50\0\u02b0\60\160\0\220\60"+
    "\20\0\12\15\113\0\73\64\140\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\3\2\1\4\1\1\1\5"+
    "\2\6\3\3\1\2\1\3\1\7\1\10\1\3\2\2"+
    "\1\3\6\2\1\7\1\10\2\2\1\3\1\11\1\12"+
    "\1\6\1\13\1\6\1\14\1\15\1\16\1\1\2\3"+
    "\2\6\1\0\1\17\1\0\1\3\7\0\1\3\1\0"+
    "\1\3\1\0\1\17\2\0\1\20\2\0\1\21\1\0"+
    "\1\3\2\0\3\3\1\6\1\0\1\2\1\17\2\0"+
    "\1\3\2\0\1\17\1\0\1\17\1\2\1\0\1\17"+
    "\2\0\1\3\2\0\2\3\2\0\1\3\6\0\3\3"+
    "\2\6\1\0\1\6\3\3\3\17\3\0\1\22\4\0"+
    "\1\3\1\6\1\3\5\0\1\22\1\0\1\23\2\0"+
    "\1\22\1\0\1\23\2\22\1\24\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\103\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\103\0\u025b\0\u02e1\0\u0860\0\u08a3\0\u08e6\0\u0929"+
    "\0\u096c\0\u09af\0\103\0\103\0\103\0\u09f2\0\u0a35\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\103\0\u0218\0\u0b84\0\u0bc7\0\u0c0a"+
    "\0\u0c4d\0\u0c90\0\u0605\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u06ce\0\u0e22\0\u0e22\0\u0e65\0\u025b\0\u029e\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103"+
    "\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\103\0\u1295\0\u12d8"+
    "\0\u068b\0\u131b\0\u0711\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u0bc7"+
    "\0\u189a\0\u0f2e\0\u0b84\0\u18dd\0\u0ff7\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u0218\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u0218\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u0218\0\103\0\u1c44\0\u1c87\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\103\0\u1814";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\12\1\11\1\12"+
    "\1\5\1\10\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\17\1\37\1\5\1\12\1\40\2\41"+
    "\1\42\1\12\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\2\1\57"+
    "\3\5\1\60\2\5\1\13\1\61\1\62\105\0\1\63"+
    "\102\0\1\4\2\5\1\4\1\64\1\65\6\0\1\66"+
    "\1\5\1\4\1\5\1\0\1\5\1\67\1\70\1\0"+
    "\1\65\1\71\1\5\1\64\1\5\1\72\1\73\1\5"+
    "\1\0\1\73\2\0\1\66\1\73\1\5\10\0\1\45"+
    "\12\0\7\5\1\0\2\66\2\0\4\5\1\0\1\65"+
    "\6\0\1\66\3\5\1\0\1\5\1\67\1\74\1\0"+
    "\1\65\1\71\1\5\1\0\1\5\1\72\1\0\1\5"+
    "\4\0\1\66\1\0\1\5\10\0\1\45\12\0\7\5"+
    "\1\0\2\66\2\0\4\5\1\0\1\65\6\0\1\66"+
    "\3\5\1\0\1\5\1\75\1\74\1\0\1\65\1\71"+
    "\1\5\1\0\1\5\1\72\1\0\1\5\4\0\1\66"+
    "\1\0\1\5\10\0\1\45\12\0\1\76\6\5\1\77"+
    "\2\66\2\0\1\4\2\5\1\100\1\64\1\65\6\0"+
    "\1\66\1\5\1\100\1\5\1\0\1\5\1\67\1\70"+
    "\1\0\1\65\1\71\1\5\1\64\1\5\1\72\1\73"+
    "\1\5\1\64\1\101\2\0\1\66\1\101\1\5\10\0"+
    "\1\45\12\0\5\5\1\76\1\5\1\0\2\66\2\0"+
    "\1\102\2\0\1\102\12\0\1\102\4\0\1\103\6\0"+
    "\1\104\1\102\1\64\1\0\1\102\3\0\1\102\40\0"+
    "\4\65\1\0\1\65\6\0\4\65\1\0\3\65\1\0"+
    "\1\65\1\71\1\65\1\0\1\65\2\0\1\65\4\0"+
    "\1\65\1\0\1\65\23\0\7\65\1\0\2\65\11\0"+
    "\1\105\1\106\2\15\37\0\1\105\1\15\22\0\1\105"+
    "\15\0\1\15\100\0\1\15\1\107\2\110\37\0\1\15"+
    "\1\110\22\0\1\15\17\0\2\16\5\0\1\111\16\0"+
    "\1\16\15\0\1\16\1\0\1\16\15\0\2\16\2\0"+
    "\1\66\1\112\2\66\1\113\1\65\5\0\1\16\1\17"+
    "\3\66\1\0\1\66\1\114\1\74\1\0\1\65\1\71"+
    "\1\66\1\0\1\66\1\72\1\0\1\66\4\0\1\17"+
    "\1\0\1\66\10\0\1\45\2\0\1\16\1\0\1\16"+
    "\5\0\7\66\1\0\1\61\1\62\2\0\1\5\1\22"+
    "\2\5\1\0\1\65\6\0\1\66\3\5\1\0\1\5"+
    "\1\67\1\74\1\0\1\65\1\71\1\5\1\0\1\5"+
    "\1\72\1\0\1\5\4\0\1\66\1\0\1\5\10\0"+
    "\1\45\12\0\7\5\1\0\2\66\2\0\1\4\2\5"+
    "\1\100\1\64\1\65\6\0\1\66\1\5\1\100\1\5"+
    "\1\0\1\5\1\67\1\70\1\0\1\65\1\71\1\5"+
    "\1\64\1\5\1\72\1\73\1\5\1\64\1\101\2\0"+
    "\1\66\1\101\1\5\10\0\1\45\12\0\5\5\1\115"+
    "\1\5\1\0\2\66\2\0\1\5\1\116\2\5\1\0"+
    "\1\65\6\0\1\66\3\5\1\0\1\5\1\67\1\74"+
    "\1\0\1\65\1\71\1\5\1\0\1\5\1\72\1\0"+
    "\1\5\4\0\1\66\1\0\1\5\10\0\1\45\12\0"+
    "\7\5\1\0\2\66\22\0\1\23\62\0\4\5\1\0"+
    "\1\65\6\0\1\66\3\5\1\0\1\117\1\67\1\74"+
    "\1\0\1\65\1\71\1\5\1\0\1\5\1\72\1\0"+
    "\1\5\4\0\1\66\1\0\1\5\10\0\1\45\12\0"+
    "\7\5\1\0\2\66\2\0\4\65\1\0\1\65\6\0"+
    "\4\65\1\0\1\65\1\25\1\65\1\0\1\65\1\71"+
    "\1\65\1\0\1\65\2\0\1\65\4\0\1\65\1\0"+
    "\1\65\2\0\2\41\17\0\7\65\1\0\2\65\2\0"+
    "\4\65\1\0\1\65\5\0\1\16\1\120\3\65\1\0"+
    "\2\65\1\121\1\0\1\65\1\71\1\65\1\0\1\65"+
    "\2\0\1\65\4\0\1\120\1\0\1\65\1\122\12\0"+
    "\1\16\1\0\1\16\5\0\7\65\1\0\2\120\2\0"+
    "\1\123\2\5\1\123\1\0\1\65\6\0\1\66\1\5"+
    "\1\123\1\5\1\0\1\5\1\67\1\124\1\0\1\65"+
    "\1\71\1\5\1\0\1\5\1\125\1\102\1\5\1\0"+
    "\1\102\2\0\1\66\1\102\1\5\10\0\1\45\12\0"+
    "\7\5\1\0\2\66\2\0\1\126\102\0\1\73\2\0"+
    "\1\73\1\64\11\0\1\73\4\0\1\127\4\0\1\64"+
    "\2\0\1\73\2\0\1\73\3\0\1\73\40\0\4\5"+
    "\1\0\1\130\6\0\1\66\3\5\1\0\1\5\1\67"+
    "\1\74\1\0\1\65\1\71\1\5\1\0\1\5\1\72"+
    "\1\0\1\5\4\0\1\66\1\0\1\5\10\0\1\45"+
    "\12\0\7\5\1\0\2\66\5\0\1\131\12\0\1\131"+
    "\17\0\1\131\3\0\1\131\40\0\1\73\2\0\1\101"+
    "\1\64\11\0\1\101\4\0\1\127\4\0\1\64\2\0"+
    "\1\73\1\0\1\64\1\101\3\0\1\101\45\0\1\132"+
    "\31\0\1\133\66\0\1\134\14\0\1\135\1\136\41\0"+
    "\1\73\2\0\1\101\1\64\11\0\1\101\4\0\1\127"+
    "\4\0\1\64\2\0\1\73\1\0\1\64\1\101\3\0"+
    "\1\101\1\137\104\0\1\40\103\0\2\41\33\0\4\45"+
    "\10\0\4\45\1\0\1\45\1\0\1\140\3\0\1\45"+
    "\1\0\1\45\1\72\1\0\1\45\4\0\1\45\1\0"+
    "\1\45\10\0\1\45\12\0\7\45\1\0\2\45\57\0"+
    "\1\46\103\0\2\47\36\0\2\16\5\0\1\111\16\0"+
    "\1\16\14\0\1\47\1\50\1\0\1\16\15\0\2\16"+
    "\62\0\2\51\34\0\2\16\5\0\1\111\16\0\1\16"+
    "\15\0\1\16\1\51\1\52\15\0\2\16\67\0\2\55"+
    "\14\0\1\5\1\141\2\5\1\0\1\65\6\0\1\66"+
    "\3\5\1\0\1\5\1\142\1\74\1\0\1\65\1\71"+
    "\1\5\1\0\1\5\1\72\1\0\1\5\4\0\1\66"+
    "\1\0\1\5\10\0\1\45\12\0\6\5\1\76\1\143"+
    "\2\66\2\0\4\5\1\0\1\65\6\0\1\66\3\5"+
    "\1\0\1\5\1\67\1\74\1\0\1\65\1\71\1\5"+
    "\1\0\1\5\1\72\1\0\1\5\4\0\1\66\1\0"+
    "\1\5\10\0\1\45\12\0\5\5\1\144\1\5\1\0"+
    "\2\66\2\0\1\145\1\112\2\66\1\146\1\65\5\0"+
    "\1\16\1\17\3\66\1\0\1\66\1\114\1\74\1\0"+
    "\1\65\1\71\1\66\1\0\1\66\1\72\1\0\1\66"+
    "\4\0\1\17\1\0\1\66\10\0\1\45\2\0\1\16"+
    "\1\0\1\16\5\0\7\66\1\0\1\61\1\62\2\0"+
    "\1\66\1\112\2\66\1\147\1\65\5\0\1\16\1\17"+
    "\3\66\1\0\1\66\1\114\1\74\1\0\1\65\1\71"+
    "\1\66\1\0\1\66\1\72\1\0\1\66\4\0\1\17"+
    "\1\0\1\66\10\0\1\45\2\0\1\16\1\0\1\16"+
    "\5\0\1\66\1\150\3\66\1\150\1\66\1\0\1\61"+
    "\1\62\3\0\1\151\101\0\4\66\1\0\1\65\6\0"+
    "\4\66\1\0\1\66\1\65\1\74\1\0\1\65\1\71"+
    "\1\66\1\0\1\66\1\72\1\0\1\66\4\0\1\66"+
    "\1\0\1\66\10\0\1\45\12\0\7\66\1\0\2\66"+
    "\2\0\1\152\3\65\1\0\1\65\6\0\4\65\1\0"+
    "\3\65\1\0\1\65\1\71\1\65\1\0\1\65\2\0"+
    "\1\153\4\0\1\65\1\0\1\65\23\0\1\65\1\154"+
    "\1\65\1\155\3\65\1\0\2\65\2\0\4\66\1\64"+
    "\1\65\6\0\4\66\1\0\1\66\2\65\1\0\1\65"+
    "\1\71\1\66\1\64\1\66\2\0\1\66\4\0\1\66"+
    "\1\0\1\66\10\0\1\45\12\0\7\66\1\0\2\66"+
    "\2\0\4\156\10\0\4\156\1\0\3\156\3\0\1\156"+
    "\1\0\1\156\2\0\1\156\4\0\1\156\1\0\1\156"+
    "\23\0\7\156\1\0\2\156\3\0\1\126\101\0\4\66"+
    "\1\0\1\65\6\0\4\66\1\0\1\66\2\65\1\0"+
    "\1\65\1\71\1\66\1\0\1\66\2\0\1\66\4\0"+
    "\1\66\1\0\1\66\10\0\1\45\12\0\7\66\1\0"+
    "\2\66\2\0\1\152\3\65\1\0\1\65\6\0\4\65"+
    "\1\0\3\65\1\0\1\65\1\71\1\65\1\0\1\65"+
    "\2\0\1\153\4\0\1\65\1\0\1\65\23\0\1\157"+
    "\1\154\1\65\1\155\3\65\1\77\2\65\2\0\4\5"+
    "\1\0\1\65\6\0\1\66\3\5\1\0\1\5\1\160"+
    "\1\74\1\0\1\65\1\71\1\5\1\0\1\5\1\72"+
    "\1\0\1\5\4\0\1\66\1\0\1\5\10\0\1\45"+
    "\12\0\7\5\1\0\2\66\71\0\1\161\13\0\1\4"+
    "\2\5\1\100\1\64\1\65\6\0\1\66\1\5\1\100"+
    "\1\5\1\0\1\5\1\67\1\70\1\0\1\65\1\71"+
    "\1\5\1\64\1\5\1\72\1\73\1\5\1\64\1\101"+
    "\2\0\1\66\1\101\1\5\10\0\1\45\12\0\7\5"+
    "\1\0\2\66\2\0\1\102\2\0\1\102\12\0\1\102"+
    "\14\0\1\102\2\0\1\102\3\0\1\102\40\0\1\102"+
    "\2\0\1\102\12\0\1\102\4\0\1\103\7\0\1\102"+
    "\2\0\1\102\3\0\1\102\51\0\1\110\100\0\1\110"+
    "\1\107\2\110\37\0\2\110\22\0\1\110\17\0\2\162"+
    "\24\0\1\162\15\0\1\162\1\0\1\162\15\0\2\162"+
    "\2\0\4\66\1\0\1\65\6\0\1\66\1\163\2\66"+
    "\1\0\1\66\1\65\1\74\1\0\1\65\1\71\1\66"+
    "\1\0\1\66\1\72\1\0\1\66\4\0\1\66\1\0"+
    "\1\66\10\0\1\45\12\0\7\66\1\0\2\66\3\0"+
    "\1\164\101\0\4\65\1\0\1\65\5\0\1\162\1\165"+
    "\3\65\1\0\3\65\1\0\1\65\1\71\1\65\1\0"+
    "\1\65\2\0\1\65\4\0\1\165\1\0\1\65\13\0"+
    "\1\162\1\0\1\162\5\0\7\65\1\0\2\165\2\0"+
    "\4\5\1\0\1\65\6\0\1\66\3\5\1\0\1\5"+
    "\1\67\1\74\1\0\1\65\1\71\1\5\1\0\1\5"+
    "\1\72\1\0\1\166\4\0\1\66\1\0\1\5\10\0"+
    "\1\45\12\0\7\5\1\0\2\66\2\0\4\5\1\0"+
    "\1\65\6\0\1\66\1\5\1\167\1\5\1\0\1\5"+
    "\1\67\1\74\1\0\1\65\1\71\1\5\1\0\1\5"+
    "\1\72\1\0\1\5\4\0\1\66\1\0\1\5\10\0"+
    "\1\45\12\0\7\5\1\0\2\66\2\0\4\5\1\0"+
    "\1\65\6\0\1\66\3\5\1\0\1\170\1\67\1\74"+
    "\1\0\1\65\1\71\1\5\1\0\1\5\1\72\1\0"+
    "\1\5\4\0\1\66\1\0\1\5\10\0\1\45\12\0"+
    "\7\5\1\0\2\66\2\0\4\65\1\0\1\65\5\0"+
    "\1\16\1\120\3\65\1\0\1\65\1\114\1\65\1\0"+
    "\1\65\1\71\1\65\1\0\1\65\2\0\1\65\4\0"+
    "\1\120\1\0\1\65\13\0\1\16\1\0\1\16\5\0"+
    "\7\65\1\0\2\120\2\0\4\65\1\0\1\65\6\0"+
    "\4\65\1\0\2\65\1\121\1\0\1\65\1\71\1\65"+
    "\1\0\1\65\2\0\1\65\4\0\1\65\1\0\1\65"+
    "\1\122\22\0\7\65\1\0\2\65\46\0\1\122\36\0"+
    "\1\123\2\5\1\123\1\0\1\65\6\0\1\66\1\5"+
    "\1\123\1\5\1\0\1\5\1\67\1\74\1\0\1\65"+
    "\1\71\1\5\1\0\1\5\1\72\1\102\1\5\1\0"+
    "\1\102\2\0\1\66\1\102\1\5\10\0\1\45\12\0"+
    "\7\5\1\0\2\66\2\0\1\171\2\66\1\171\1\0"+
    "\1\65\6\0\2\66\1\171\1\66\1\0\1\66\2\65"+
    "\1\0\1\65\1\71\1\66\1\0\1\66\1\0\1\102"+
    "\1\66\1\0\1\102\2\0\1\66\1\102\1\66\10\0"+
    "\1\45\12\0\7\66\1\0\2\66\2\0\1\102\1\126"+
    "\1\0\1\102\12\0\1\102\4\0\1\103\7\0\1\102"+
    "\2\0\1\102\3\0\1\102\44\0\1\64\23\0\1\64"+
    "\52\0\4\65\1\0\1\65\6\0\4\65\1\0\3\65"+
    "\1\0\1\65\1\71\1\65\1\0\1\65\2\0\1\172"+
    "\4\0\1\65\1\0\1\65\23\0\7\65\1\0\2\65"+
    "\7\0\1\132\31\0\1\173\66\0\1\134\102\0\1\134"+
    "\14\0\1\135\103\0\1\136\77\0\1\64\44\0\4\45"+
    "\10\0\4\45\1\0\1\45\5\0\1\45\1\0\1\45"+
    "\2\0\1\45\4\0\1\45\1\0\1\45\10\0\1\45"+
    "\12\0\7\45\1\0\2\45\2\0\4\5\1\0\1\65"+
    "\6\0\1\66\3\5\1\0\1\5\1\67\1\74\1\0"+
    "\1\65\1\71\1\5\1\0\1\5\1\72\1\0\1\5"+
    "\4\0\1\66\1\0\1\5\10\0\1\45\12\0\3\5"+
    "\1\76\3\5\1\0\2\66\2\0\1\152\3\65\1\0"+
    "\1\65\6\0\4\65\1\0\3\65\1\0\1\65\1\71"+
    "\1\65\1\0\1\65\2\0\1\153\4\0\1\65\1\0"+
    "\1\65\23\0\1\65\1\154\1\65\1\155\2\65\1\157"+
    "\1\143\2\65\77\0\1\161\5\0\1\76\3\5\1\0"+
    "\1\65\6\0\1\66\3\5\1\0\1\5\1\160\1\74"+
    "\1\0\1\65\1\71\1\5\1\0\1\5\1\72\1\0"+
    "\1\5\4\0\1\66\1\0\1\5\10\0\1\45\12\0"+
    "\7\5\1\0\2\66\2\0\1\66\1\163\2\66\1\0"+
    "\1\65\6\0\4\66\1\0\1\66\1\65\1\74\1\0"+
    "\1\65\1\71\1\66\1\0\1\66\1\72\1\0\1\66"+
    "\4\0\1\66\1\0\1\66\10\0\1\45\12\0\7\66"+
    "\1\0\2\66\2\0\1\174\1\164\102\0\1\164\66\0"+
    "\1\175\3\0\1\175\6\0\3\66\1\163\1\0\1\65"+
    "\6\0\4\66\1\0\1\66\1\65\1\74\1\0\1\65"+
    "\1\71\1\66\1\0\1\66\1\72\1\0\1\66\4\0"+
    "\1\66\1\0\1\66\10\0\1\45\12\0\7\66\1\0"+
    "\2\66\4\0\1\176\100\0\4\65\1\0\1\65\6\0"+
    "\4\65\1\0\3\65\1\0\1\65\1\71\1\65\1\0"+
    "\1\65\2\0\1\65\4\0\1\65\1\0\1\65\23\0"+
    "\1\177\6\65\1\0\2\65\2\0\4\65\1\0\1\65"+
    "\6\0\4\65\1\0\3\65\1\0\1\65\1\71\1\65"+
    "\1\0\1\65\2\0\1\65\4\0\1\65\1\0\1\65"+
    "\23\0\5\65\1\200\1\65\1\0\2\65\2\0\4\65"+
    "\1\0\1\65\6\0\4\65\1\0\3\65\1\0\1\65"+
    "\1\71\1\65\1\0\1\65\2\0\1\65\4\0\1\65"+
    "\1\0\1\65\23\0\1\201\1\65\1\177\4\65\1\0"+
    "\2\65\2\0\4\65\1\0\1\65\6\0\4\65\1\0"+
    "\3\65\1\0\1\65\1\71\1\65\1\0\1\65\2\0"+
    "\1\202\4\0\1\65\1\0\1\65\23\0\7\65\1\0"+
    "\2\65\2\0\4\156\10\0\4\156\1\0\1\156\1\203"+
    "\1\156\3\0\1\156\1\0\1\156\2\0\1\156\4\0"+
    "\1\156\1\0\1\156\23\0\7\156\1\0\2\156\2\0"+
    "\4\65\1\0\1\65\6\0\4\65\1\0\1\65\1\204"+
    "\1\65\1\0\1\65\1\71\1\65\1\0\1\65\2\0"+
    "\1\65\4\0\1\65\1\0\1\65\23\0\7\65\1\0"+
    "\2\65\24\0\1\126\75\0\1\205\65\0\4\5\1\0"+
    "\1\65\6\0\1\66\2\5\1\76\1\0\1\5\1\67"+
    "\1\74\1\0\1\65\1\71\1\5\1\0\1\5\1\72"+
    "\1\0\1\5\4\0\1\66\1\0\1\5\10\0\1\45"+
    "\12\0\7\5\1\0\2\66\2\0\1\206\3\5\1\207"+
    "\1\65\6\0\1\66\3\5\1\0\1\5\1\67\1\74"+
    "\1\0\1\65\1\71\1\5\1\0\1\5\1\72\1\0"+
    "\1\5\4\0\1\66\1\0\1\5\10\0\1\45\12\0"+
    "\7\5\1\0\2\66\2\0\4\5\1\0\1\65\6\0"+
    "\1\66\3\5\1\0\1\5\1\210\1\74\1\0\1\65"+
    "\1\71\1\5\1\0\1\5\1\72\1\0\1\5\4\0"+
    "\1\66\1\0\1\5\10\0\1\45\12\0\7\5\1\0"+
    "\2\66\2\0\1\171\2\66\1\171\1\0\1\65\6\0"+
    "\2\66\1\171\1\66\1\0\1\66\1\65\1\74\1\0"+
    "\1\65\1\71\1\66\1\0\1\66\1\72\1\102\1\66"+
    "\1\0\1\102\2\0\1\66\1\102\1\66\10\0\1\45"+
    "\12\0\7\66\1\0\2\66\41\0\1\173\44\0\1\205"+
    "\104\0\1\205\102\0\1\211\77\0\4\65\1\0\1\65"+
    "\6\0\4\65\1\0\3\65\1\0\1\65\1\71\1\65"+
    "\1\0\1\65\2\0\1\65\4\0\1\65\1\0\1\65"+
    "\23\0\6\65\1\177\1\0\2\65\2\0\1\65\1\177"+
    "\2\65\1\0\1\65\6\0\4\65\1\0\3\65\1\0"+
    "\1\65\1\71\1\65\1\0\1\65\2\0\1\65\4\0"+
    "\1\65\1\0\1\65\23\0\7\65\1\0\2\65\2\0"+
    "\4\65\1\0\1\65\6\0\4\65\1\0\3\65\1\0"+
    "\1\65\1\71\1\65\1\0\1\65\2\0\1\65\4\0"+
    "\1\65\1\0\1\65\23\0\4\65\1\177\2\65\1\0"+
    "\2\65\2\0\4\212\10\0\1\156\3\212\1\0\1\212"+
    "\1\203\1\156\3\0\1\212\1\0\1\212\2\0\1\212"+
    "\4\0\1\156\1\0\1\212\23\0\7\212\1\0\2\156"+
    "\2\0\4\5\1\207\1\65\6\0\1\66\3\5\1\0"+
    "\1\5\1\67\1\74\1\0\1\65\1\71\1\5\1\0"+
    "\1\5\1\72\1\0\1\5\4\0\1\66\1\0\1\5"+
    "\10\0\1\45\12\0\7\5\1\0\2\66\22\0\1\213"+
    "\62\0\4\214\1\0\1\65\6\0\4\214\1\0\1\214"+
    "\1\65\1\214\1\0\1\65\1\71\1\214\1\0\1\214"+
    "\2\0\1\214\4\0\1\214\1\0\1\214\23\0\7\214"+
    "\1\0\2\214\6\0\1\215\76\0\4\216\10\0\1\156"+
    "\3\216\1\0\1\216\1\203\1\156\3\0\1\216\1\0"+
    "\1\216\2\0\1\216\4\0\1\156\1\0\1\216\23\0"+
    "\7\216\1\0\2\156\22\0\1\217\62\0\4\214\1\220"+
    "\1\65\6\0\4\214\1\221\1\214\1\210\1\214\1\0"+
    "\1\65\1\71\1\214\1\0\1\214\2\0\1\214\4\0"+
    "\1\214\1\0\1\214\23\0\7\214\1\0\2\214\2\0"+
    "\4\222\1\0\1\222\6\0\4\222\1\0\1\222\1\0"+
    "\1\222\3\0\1\222\1\0\1\222\2\0\1\222\4\0"+
    "\1\222\1\0\1\222\23\0\7\222\1\0\2\222\2\0"+
    "\4\223\10\0\1\156\3\223\1\0\1\223\1\203\1\156"+
    "\3\0\1\223\1\0\1\223\2\0\1\223\4\0\1\156"+
    "\1\0\1\223\23\0\7\223\1\0\2\156\2\0\4\224"+
    "\10\0\4\224\1\0\1\224\1\0\1\224\3\0\1\224"+
    "\1\0\1\224\2\0\1\224\4\0\1\224\1\0\1\224"+
    "\23\0\7\224\1\0\2\224\16\0\1\225\24\0\1\225"+
    "\35\0\2\225\2\0\6\221\6\0\16\221\1\0\4\221"+
    "\2\0\3\221\1\0\1\221\1\0\1\221\17\0\7\221"+
    "\1\0\2\221\2\0\4\222\1\0\1\222\1\226\5\0"+
    "\4\222\1\0\1\222\1\0\1\222\3\0\1\222\1\0"+
    "\1\222\2\0\1\222\4\0\1\222\1\0\1\222\23\0"+
    "\7\222\1\0\2\222\2\0\4\227\10\0\1\156\3\227"+
    "\1\0\1\227\1\203\1\156\3\0\1\227\1\0\1\227"+
    "\2\0\1\227\4\0\1\156\1\0\1\227\23\0\7\227"+
    "\1\0\2\156\2\0\4\224\1\220\7\0\4\224\1\221"+
    "\1\224\1\217\1\224\3\0\1\224\1\0\1\224\2\0"+
    "\1\224\4\0\1\224\1\0\1\224\23\0\7\224\1\0"+
    "\2\224\16\0\1\225\3\0\1\221\20\0\1\225\35\0"+
    "\2\225";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8308];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\27\1\1\11\10\1\3\11"+
    "\5\1\1\0\1\11\1\0\1\1\7\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\4\1\1\0\2\1\2\0\1\11\2\0"+
    "\1\1\1\0\2\1\1\0\1\1\2\0\1\1\2\0"+
    "\2\1\2\0\1\1\6\0\5\1\1\0\7\1\3\0"+
    "\1\1\4\0\1\1\1\11\1\1\5\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public ArrayList<Token> readSentence() throws IOException {
    ArrayList<Token> sentence = new ArrayList<Token>();
    Token token, lastNonSpace = null, lastSpace = null;

    while((token = yylex()) != null) {
        if(token.isSpace()) {
            if(token.type == Token.TOK_NEWLINES) {
                if(!sentence.isEmpty()) return sentence;
            }
            lastSpace = token;
        } else {
            if(!sentence.isEmpty()) {
                if(lastNonSpace != null &&
                   lastNonSpace.value.endsWith(".") &&
                   lastNonSpace.value.length() > 1 &&
                   token.isCapitalized())
                {
                    yypushback(yylength());
                    return sentence;
                } else if(token.type == Token.TOK_SENT_FINAL) {
                    if(lastNonSpace != null &&
                       lastNonSpace.value.length() == 1 &&
                       lastNonSpace.isCapitalized())
                    {
                    } else {
                        sentence.add(token);
                        return sentence;
                    }
                }
            }
            // I admit this is not pretty.
            if(token.type == Token.TOK_LATIN) {
                String textLower = token.value.toLowerCase();
                int length = token.value.length();
                if(textLower.endsWith("n't")) {
                    if(textLower.equals("can't")) {
                        sentence.add(new Token(
                            Token.TOK_LATIN, token.value.substring(0,3),
                            token.offset));
                        sentence.add(new Token(
                            Token.TOK_LATIN, token.value.substring(2),
                            token.offset+2));
                    } else {
                        sentence.add(new Token(
                            Token.TOK_LATIN,
                            token.value.substring(0,length-3),
                            token.offset));
                        sentence.add(new Token(
                            Token.TOK_LATIN,
                            token.value.substring(length-3),
                            token.offset+length-3));
                    }
                } else {
                    sentence.add(token);
                }
            } else {
                sentence.add(token);
            }
            lastNonSpace = token;
        }
    }
    if(sentence.isEmpty()) return null;
    return sentence;
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EnglishTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public EnglishTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 370) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return(new Token(Token.TOK_LATIN,yytext(),yychar));
          }
        case 21: break;
        case 10: 
          { return(new Token(Token.TOK_ARABIC,yytext(),yychar));
          }
        case 22: break;
        case 7: 
          { return(new Token(Token.TOK_SENT_FINAL,yytext(),yychar));
          }
        case 23: break;
        case 18: 
          { return(new Token(Token.TOK_URL,yytext(),yychar));
          }
        case 24: break;
        case 1: 
          { return(new Token(Token.TOK_UNKNOWN,yytext(),yychar));
          }
        case 25: break;
        case 6: 
          { return(new Token(Token.TOK_NUMBER,yytext(),yychar));
          }
        case 26: break;
        case 16: 
          { return(new Token(Token.TOK_SPACES,yytext(),yychar));
          }
        case 27: break;
        case 14: 
          { return(new Token(Token.TOK_HANZI,yytext(),yychar));
          }
        case 28: break;
        case 12: 
          { return(new Token(Token.TOK_KANA,yytext(),yychar));
          }
        case 29: break;
        case 13: 
          { return(new Token(Token.TOK_HANGUL,yytext(),yychar));
          }
        case 30: break;
        case 5: 
          { return(new Token(Token.TOK_NEWLINE,yytext(),yychar));
          }
        case 31: break;
        case 20: 
          { sentID = yytext().substring(6, yylength()-1);
          }
        case 32: break;
        case 8: 
          { return(new Token(Token.TOK_DASH,yytext(),yychar));
          }
        case 33: break;
        case 15: 
          { return(new Token(Token.TOK_SMILEY,yytext(),yychar));
          }
        case 34: break;
        case 19: 
          { return(new Token(Token.TOK_EMAIL,yytext(),yychar));
          }
        case 35: break;
        case 2: 
          { return(new Token(Token.TOK_SYMBOL,yytext(),yychar));
          }
        case 36: break;
        case 17: 
          { return(new Token(Token.TOK_NEWLINES,yytext(),yychar));
          }
        case 37: break;
        case 11: 
          { return(new Token(Token.TOK_NAGARI,yytext(),yychar));
          }
        case 38: break;
        case 9: 
          { return(new Token(Token.TOK_GREEK,yytext(),yychar));
          }
        case 39: break;
        case 4: 
          { return(new Token(Token.TOK_SPACE,yytext(),yychar));
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
