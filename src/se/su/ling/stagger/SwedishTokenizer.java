/* The following code was generated by JFlex 1.4.3 on 11/24/13 1:26 AM */

package se.su.ling.stagger;
import java.util.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/24/13 1:26 AM from the specification file
 * <tt>SwedishTokenizer.flex</tt>
 */
public class SwedishTokenizer extends Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\13\2\0\1\12\22\0\1\101\1\50\1\53\1\26"+
    "\1\35\1\27\1\26\1\34\1\44\1\40\1\53\1\27\1\47\1\25"+
    "\1\24\1\22\1\16\2\107\1\43\6\16\1\6\1\32\1\42\1\37"+
    "\1\46\1\51\1\30\1\100\1\103\1\74\1\5\1\71\1\21\1\77"+
    "\1\17\1\4\1\31\1\105\1\104\1\75\1\72\1\36\1\20\1\31"+
    "\1\76\1\2\1\3\1\73\1\106\1\23\1\102\1\45\1\31\1\1"+
    "\1\26\1\10\1\41\1\7\1\53\1\100\1\103\1\74\1\5\1\71"+
    "\1\21\1\77\1\17\1\4\1\31\1\105\1\104\1\75\1\72\1\36"+
    "\1\20\1\31\1\76\1\2\1\3\1\73\1\106\1\23\1\33\1\45"+
    "\1\31\3\53\1\26\6\0\1\14\32\0\1\11\37\53\27\56\1\53"+
    "\37\56\1\53\210\56\u01f0\0\220\57\u0200\0\140\60\12\61\206\60\12\61"+
    "\6\60\120\0\60\60\u0180\0\146\62\12\63\20\62\146\0\12\15\166\0"+
    "\12\15\166\0\12\15\166\0\12\15\167\0\11\15\166\0\12\15\166\0"+
    "\12\15\166\0\12\15\340\0\12\15\166\0\12\15\106\0\12\15\u0116\0"+
    "\12\15\266\0\u0100\65\u0169\0\11\15\u046e\0\12\15\46\0\12\15\u012c\0"+
    "\12\15\u0380\0\60\62\u0200\0\u0100\57\16\11\2\0\6\52\22\53\2\55"+
    "\33\53\u0fbb\0\1\54\37\53\40\0\300\64\60\0\140\65\u0270\0\u19c0\66"+
    "\100\0\u5200\66\u08e0\0\40\62\140\0\40\65\u2e30\0\120\65\100\70\60\67"+
    "\u0790\70\u1b50\0\u02b0\60\160\0\220\60\20\0\12\15\113\0\73\64\140\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\3\2\1\4\1\1\1\5"+
    "\2\6\2\3\1\2\1\3\1\7\1\10\1\2\1\3"+
    "\1\2\1\3\6\2\1\7\1\10\2\2\1\3\1\11"+
    "\1\12\1\6\1\13\1\6\1\14\1\15\1\16\1\1"+
    "\4\3\1\6\1\0\1\17\1\0\1\3\1\0\1\3"+
    "\1\0\1\17\4\0\3\3\2\0\1\17\1\2\1\0"+
    "\1\20\2\0\1\21\3\0\1\6\2\3\1\0\1\3"+
    "\1\0\2\3\1\6\1\0\1\2\1\0\1\17\1\3"+
    "\1\0\1\3\3\0\1\17\1\0\1\17\1\2\1\0"+
    "\1\17\1\0\4\3\2\0\1\3\2\0\1\3\1\0"+
    "\2\3\13\0\3\6\1\3\4\0\1\3\1\17\2\0"+
    "\1\17\2\0\1\17\1\3\4\0\1\6\1\0\1\3"+
    "\1\22\5\0\2\3\1\0\1\3\7\0\1\3\1\0"+
    "\1\22\1\0\1\23\2\0\1\22\1\0\1\23\2\22"+
    "\1\24\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\110\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0"+
    "\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870"+
    "\0\110\0\u0288\0\u0318\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\110\0\110\0\110\0\u0a68\0\u0ab0\0\u0af8\0\u0b40"+
    "\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0240\0\u0ca8\0\u0cf0\0\u0d38"+
    "\0\u0d80\0\110\0\u0dc8\0\u0630\0\u0c60\0\u0e10\0\u0e58\0\u0ea0"+
    "\0\u0ee8\0\u0f30\0\u0708\0\u0f78\0\u0f78\0\u0fc0\0\u0288\0\u02d0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u0ca8\0\u1170\0\u11b8"+
    "\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u0f78\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0"+
    "\0\u06c0\0\u1638\0\u0750\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0"+
    "\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0"+
    "\0\110\0\u1a28\0\u0dc8\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90"+
    "\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1098"+
    "\0\u1a28\0\u1128\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u1fc8\0\u2010\0\u0240\0\u2058\0\u20a0\0\u20e8\0\u0cf0"+
    "\0\u2130\0\u2178\0\u21c0\0\u2208\0\u1a70\0\u2250\0\u2298\0\u0240"+
    "\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8"+
    "\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718"+
    "\0\u0240\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\110\0\u1bd8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\15\1\16\1\17\1\20\1\7"+
    "\1\21\1\22\1\23\1\24\1\25\1\12\1\11\1\12"+
    "\1\6\1\26\1\27\1\12\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\17\1\36\1\6\1\12\1\37\2\40"+
    "\1\41\1\12\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\2\1\56"+
    "\2\6\1\57\1\60\3\6\1\13\1\6\1\61\3\6"+
    "\1\62\112\0\1\63\107\0\1\4\2\6\1\4\1\64"+
    "\1\65\6\0\1\66\1\6\1\4\1\6\1\0\1\6"+
    "\1\67\1\70\1\0\1\65\1\71\1\6\1\72\1\6"+
    "\1\73\1\74\1\6\1\0\1\74\2\0\1\66\1\74"+
    "\1\6\10\0\1\44\12\0\10\6\1\0\5\6\1\66"+
    "\2\0\4\6\1\75\1\65\6\0\1\66\3\6\1\0"+
    "\1\6\1\76\1\77\1\0\1\65\1\71\1\6\1\0"+
    "\1\6\1\73\1\0\1\100\4\0\1\66\1\0\1\6"+
    "\10\0\1\44\12\0\1\101\7\6\1\102\5\6\1\66"+
    "\2\0\4\6\1\75\1\65\6\0\1\66\3\6\1\0"+
    "\1\6\1\67\1\77\1\0\1\65\1\71\1\6\1\0"+
    "\1\6\1\73\1\0\1\6\4\0\1\66\1\0\1\6"+
    "\10\0\1\44\12\0\10\6\1\0\5\6\1\66\2\0"+
    "\1\4\2\6\1\7\1\64\1\65\6\0\1\66\1\6"+
    "\1\7\1\6\1\0\1\6\1\67\1\70\1\0\1\65"+
    "\1\71\1\6\1\72\1\6\1\73\1\74\1\6\1\72"+
    "\1\103\2\0\1\66\1\103\1\6\10\0\1\44\12\0"+
    "\10\6\1\0\5\6\1\66\2\0\1\104\2\0\1\104"+
    "\12\0\1\104\4\0\1\105\6\0\1\106\1\104\1\72"+
    "\1\0\1\104\3\0\1\104\45\0\4\65\1\0\1\65"+
    "\6\0\4\65\1\0\3\65\1\0\1\65\1\71\1\65"+
    "\1\0\1\65\2\0\1\65\4\0\1\65\1\0\1\65"+
    "\23\0\10\65\1\0\6\65\11\0\1\107\1\110\2\15"+
    "\37\0\1\107\1\15\23\0\1\107\21\0\1\15\105\0"+
    "\1\15\1\111\2\112\37\0\1\15\1\112\23\0\1\15"+
    "\23\0\2\16\5\0\1\113\16\0\1\16\3\0\1\113"+
    "\11\0\1\16\1\0\1\16\23\0\1\16\2\0\4\66"+
    "\1\114\1\65\5\0\1\16\1\17\3\66\1\0\1\66"+
    "\1\115\1\77\1\0\1\65\1\71\1\66\1\0\1\66"+
    "\1\73\1\0\1\66\4\0\1\17\1\0\1\66\1\0"+
    "\1\113\6\0\1\44\2\0\1\16\1\0\1\16\5\0"+
    "\1\116\7\66\1\0\5\66\1\62\2\0\1\6\1\117"+
    "\2\6\1\75\1\65\6\0\1\66\3\6\1\0\1\6"+
    "\1\67\1\77\1\0\1\65\1\71\1\6\1\0\1\6"+
    "\1\73\1\0\1\6\4\0\1\66\1\0\1\6\10\0"+
    "\1\44\12\0\10\6\1\0\5\6\1\66\2\0\1\6"+
    "\1\120\2\6\1\75\1\65\6\0\1\66\3\6\1\0"+
    "\1\6\1\121\1\77\1\0\1\65\1\71\1\6\1\0"+
    "\1\6\1\73\1\0\1\6\4\0\1\66\1\0\1\6"+
    "\10\0\1\44\12\0\5\6\1\122\2\6\1\123\3\6"+
    "\1\124\1\6\1\66\22\0\1\22\67\0\4\6\1\75"+
    "\1\65\6\0\1\66\3\6\1\0\1\125\1\67\1\77"+
    "\1\0\1\65\1\71\1\6\1\0\1\6\1\73\1\0"+
    "\1\6\4\0\1\66\1\0\1\6\10\0\1\44\12\0"+
    "\10\6\1\0\5\6\1\66\2\0\4\65\1\0\1\65"+
    "\6\0\4\65\1\0\1\65\1\24\1\65\1\0\1\65"+
    "\1\71\1\65\1\0\1\65\2\0\1\65\4\0\1\65"+
    "\1\0\1\65\2\0\2\40\17\0\10\65\1\0\6\65"+
    "\2\0\4\65\1\0\1\65\5\0\1\16\1\126\3\65"+
    "\1\0\2\65\1\127\1\0\1\65\1\71\1\65\1\0"+
    "\1\65\2\0\1\65\4\0\1\126\1\0\1\65\1\130"+
    "\12\0\1\16\1\0\1\16\5\0\10\65\1\0\5\65"+
    "\1\126\2\0\1\104\2\0\1\104\12\0\1\104\4\0"+
    "\1\131\6\0\1\106\1\104\1\72\1\0\1\104\3\0"+
    "\1\104\45\0\1\132\2\6\1\132\1\75\1\65\6\0"+
    "\1\66\1\6\1\132\1\6\1\0\1\6\1\67\1\133"+
    "\1\0\1\65\1\71\1\6\1\0\1\6\1\106\1\104"+
    "\1\6\1\0\1\104\2\0\1\66\1\104\1\6\10\0"+
    "\1\44\12\0\10\6\1\0\5\6\1\66\2\0\1\74"+
    "\2\0\1\74\1\72\11\0\1\74\4\0\1\134\4\0"+
    "\1\72\2\0\1\74\2\0\1\74\3\0\1\74\45\0"+
    "\1\135\3\6\1\75\1\136\6\0\1\66\3\6\1\0"+
    "\1\6\1\137\1\77\1\0\1\65\1\71\1\6\1\0"+
    "\1\6\1\73\1\0\1\6\4\0\1\66\1\0\1\6"+
    "\10\0\1\44\12\0\10\6\1\140\5\6\1\66\5\0"+
    "\1\141\12\0\1\141\17\0\1\141\3\0\1\141\45\0"+
    "\1\74\2\0\1\103\1\72\11\0\1\103\4\0\1\134"+
    "\4\0\1\72\2\0\1\74\1\0\1\72\1\103\3\0"+
    "\1\103\52\0\1\142\31\0\1\143\73\0\1\144\14\0"+
    "\1\145\1\146\46\0\1\74\2\0\1\103\1\72\11\0"+
    "\1\103\4\0\1\134\4\0\1\72\2\0\1\74\1\0"+
    "\1\72\1\103\3\0\1\103\1\147\111\0\1\37\110\0"+
    "\2\40\40\0\4\44\1\75\7\0\4\44\1\0\1\44"+
    "\1\0\1\150\3\0\1\44\1\0\1\44\1\73\1\0"+
    "\1\44\4\0\1\44\1\0\1\44\10\0\1\44\12\0"+
    "\10\44\1\0\6\44\57\0\1\45\110\0\2\46\43\0"+
    "\2\16\5\0\1\113\16\0\1\16\3\0\1\113\10\0"+
    "\1\46\1\47\1\0\1\16\23\0\1\16\62\0\2\50"+
    "\41\0\2\16\5\0\1\113\16\0\1\16\3\0\1\113"+
    "\11\0\1\16\1\50\1\51\23\0\1\16\67\0\2\54"+
    "\21\0\1\6\1\151\2\6\1\75\1\65\6\0\1\66"+
    "\3\6\1\0\1\6\1\121\1\77\1\0\1\65\1\71"+
    "\1\6\1\0\1\6\1\73\1\0\1\6\4\0\1\66"+
    "\1\0\1\6\10\0\1\44\12\0\10\6\1\123\3\6"+
    "\1\124\1\6\1\66\2\0\4\6\1\75\1\65\6\0"+
    "\1\66\3\6\1\0\1\6\1\67\1\77\1\0\1\65"+
    "\1\71\1\6\1\0\1\6\1\73\1\0\1\6\4\0"+
    "\1\66\1\0\1\6\10\0\1\44\12\0\7\6\1\152"+
    "\1\0\5\6\1\66\2\0\4\6\1\75\1\65\6\0"+
    "\1\66\2\6\1\153\1\0\1\6\1\154\1\77\1\0"+
    "\1\65\1\71\1\6\1\0\1\6\1\73\1\0\1\6"+
    "\4\0\1\66\1\0\1\6\10\0\1\44\12\0\10\6"+
    "\1\155\5\6\1\66\2\0\4\6\1\75\1\65\6\0"+
    "\1\66\3\6\1\0\1\6\1\67\1\77\1\0\1\65"+
    "\1\71\1\6\1\0\1\6\1\73\1\0\1\6\4\0"+
    "\1\66\1\0\1\6\10\0\1\44\12\0\10\6\1\0"+
    "\2\6\1\156\2\6\1\66\2\0\4\66\1\157\1\65"+
    "\5\0\1\16\1\17\3\66\1\0\1\66\1\115\1\77"+
    "\1\0\1\65\1\71\1\66\1\0\1\66\1\73\1\0"+
    "\1\66\4\0\1\17\1\0\1\66\1\0\1\113\6\0"+
    "\1\44\2\0\1\16\1\0\1\16\5\0\1\116\6\66"+
    "\1\116\1\0\5\66\1\62\3\0\1\160\106\0\1\161"+
    "\66\0\1\162\1\163\5\0\1\164\11\0\4\66\1\75"+
    "\1\65\6\0\4\66\1\0\1\66\1\65\1\77\1\0"+
    "\1\65\1\71\1\66\1\0\1\66\1\73\1\0\1\66"+
    "\4\0\1\66\1\0\1\66\10\0\1\44\12\0\10\66"+
    "\1\0\6\66\2\0\1\165\3\65\1\0\1\65\6\0"+
    "\4\65\1\0\3\65\1\0\1\65\1\71\1\65\1\0"+
    "\1\65\2\0\1\166\4\0\1\65\1\0\1\65\23\0"+
    "\1\65\1\167\1\65\1\170\4\65\1\0\6\65\2\0"+
    "\4\66\1\72\1\65\6\0\4\66\1\0\1\66\2\65"+
    "\1\0\1\65\1\71\1\66\1\72\1\66\2\0\1\66"+
    "\4\0\1\66\1\0\1\66\10\0\1\44\12\0\10\66"+
    "\1\0\6\66\2\0\4\171\10\0\4\171\1\0\3\171"+
    "\3\0\1\171\1\0\1\171\2\0\1\171\4\0\1\171"+
    "\1\0\1\171\23\0\10\171\1\0\6\171\2\0\1\161"+
    "\107\0\1\165\3\65\1\0\1\65\6\0\4\65\1\0"+
    "\3\65\1\0\1\65\1\71\1\65\1\0\1\65\2\0"+
    "\1\172\4\0\1\65\1\0\1\65\23\0\1\173\1\167"+
    "\1\65\1\170\4\65\1\102\6\65\2\0\4\66\1\0"+
    "\1\65\6\0\4\66\1\0\1\66\2\65\1\0\1\65"+
    "\1\71\1\66\1\0\1\66\2\0\1\66\4\0\1\66"+
    "\1\0\1\66\10\0\1\44\12\0\10\66\1\0\6\66"+
    "\2\0\4\6\1\75\1\65\6\0\1\66\3\6\1\0"+
    "\1\6\1\174\1\77\1\0\1\65\1\71\1\6\1\0"+
    "\1\6\1\73\1\0\1\6\4\0\1\66\1\0\1\6"+
    "\10\0\1\44\12\0\4\6\1\152\3\6\1\175\5\6"+
    "\1\66\2\0\4\6\1\75\1\65\6\0\1\66\3\6"+
    "\1\0\1\6\1\67\1\77\1\0\1\65\1\71\1\6"+
    "\1\0\1\152\1\73\1\0\1\6\4\0\1\66\1\0"+
    "\1\6\10\0\1\44\12\0\10\6\1\0\1\152\4\6"+
    "\1\66\36\0\1\176\32\0\1\177\20\0\1\104\2\0"+
    "\1\104\12\0\1\104\14\0\1\104\2\0\1\104\3\0"+
    "\1\104\45\0\1\104\2\0\1\104\12\0\1\104\4\0"+
    "\1\131\7\0\1\104\2\0\1\104\3\0\1\104\56\0"+
    "\1\112\105\0\1\112\1\111\2\112\37\0\2\112\23\0"+
    "\1\112\23\0\2\200\24\0\1\200\15\0\1\200\1\0"+
    "\1\200\23\0\1\200\2\0\1\161\66\0\1\201\1\163"+
    "\5\0\1\164\11\0\4\65\1\0\1\65\5\0\1\200"+
    "\1\202\3\65\1\0\3\65\1\0\1\65\1\71\1\65"+
    "\1\0\1\65\2\0\1\65\4\0\1\202\1\0\1\65"+
    "\13\0\1\200\1\0\1\200\5\0\10\65\1\0\5\65"+
    "\1\202\2\0\1\6\1\120\2\6\1\75\1\65\6\0"+
    "\1\66\3\6\1\0\1\6\1\67\1\77\1\0\1\65"+
    "\1\71\1\6\1\0\1\6\1\73\1\0\1\6\4\0"+
    "\1\66\1\0\1\6\10\0\1\44\12\0\10\6\1\0"+
    "\5\6\1\66\2\0\4\6\1\75\1\65\6\0\1\66"+
    "\1\6\1\203\1\6\1\0\1\6\1\67\1\77\1\0"+
    "\1\65\1\71\1\6\1\0\1\6\1\73\1\0\1\6"+
    "\4\0\1\66\1\0\1\6\10\0\1\44\12\0\10\6"+
    "\1\0\5\6\1\66\2\0\1\165\3\65\1\0\1\65"+
    "\6\0\4\65\1\0\3\65\1\0\1\65\1\71\1\65"+
    "\1\0\1\65\2\0\1\166\4\0\1\65\1\0\1\65"+
    "\23\0\1\65\1\167\1\65\1\170\4\65\1\123\3\65"+
    "\1\204\2\65\2\0\4\6\1\75\1\65\6\0\1\66"+
    "\3\6\1\0\1\6\1\205\1\77\1\0\1\65\1\71"+
    "\1\6\1\0\1\6\1\73\1\0\1\100\4\0\1\66"+
    "\1\0\1\6\10\0\1\44\12\0\10\6\1\206\5\6"+
    "\1\66\105\0\1\207\4\0\4\6\1\75\1\65\6\0"+
    "\1\66\3\6\1\0\1\6\1\67\1\77\1\0\1\65"+
    "\1\71\1\6\1\0\1\6\1\73\1\0\1\6\4\0"+
    "\1\66\1\0\1\6\10\0\1\44\12\0\5\6\1\152"+
    "\2\6\1\0\5\6\1\66\2\0\4\6\1\75\1\65"+
    "\6\0\1\66\3\6\1\0\1\210\1\67\1\77\1\0"+
    "\1\65\1\71\1\6\1\0\1\6\1\73\1\0\1\6"+
    "\4\0\1\66\1\0\1\6\10\0\1\44\12\0\10\6"+
    "\1\0\5\6\1\66\2\0\4\65\1\0\1\65\5\0"+
    "\1\16\1\126\3\65\1\0\1\65\1\115\1\65\1\0"+
    "\1\65\1\71\1\65\1\0\1\65\2\0\1\65\4\0"+
    "\1\126\1\0\1\65\1\0\1\113\11\0\1\16\1\0"+
    "\1\16\5\0\10\65\1\0\5\65\1\126\2\0\4\65"+
    "\1\0\1\65\6\0\4\65\1\0\2\65\1\127\1\0"+
    "\1\65\1\71\1\65\1\0\1\65\2\0\1\65\4\0"+
    "\1\65\1\0\1\65\1\130\22\0\10\65\1\0\6\65"+
    "\46\0\1\130\43\0\1\132\2\6\1\132\1\75\1\65"+
    "\6\0\1\66\1\6\1\132\1\6\1\0\1\6\1\67"+
    "\1\77\1\0\1\65\1\71\1\6\1\0\1\6\1\73"+
    "\1\104\1\6\1\0\1\104\2\0\1\66\1\104\1\6"+
    "\10\0\1\44\12\0\10\6\1\0\5\6\1\66\2\0"+
    "\1\211\2\66\1\211\1\0\1\65\6\0\2\66\1\211"+
    "\1\66\1\0\1\66\2\65\1\0\1\65\1\71\1\66"+
    "\1\0\1\66\1\0\1\104\1\66\1\0\1\104\2\0"+
    "\1\66\1\104\1\66\10\0\1\44\12\0\10\66\1\0"+
    "\6\66\6\0\1\72\23\0\1\72\57\0\4\6\1\75"+
    "\1\65\6\0\1\66\3\6\1\0\1\6\1\212\1\77"+
    "\1\0\1\65\1\71\1\6\1\0\1\6\1\73\1\0"+
    "\1\6\4\0\1\66\1\0\1\6\10\0\1\44\12\0"+
    "\10\6\1\213\4\6\1\152\1\66\2\0\4\65\1\0"+
    "\1\65\6\0\4\65\1\0\3\65\1\0\1\65\1\71"+
    "\1\65\1\0\1\65\2\0\1\214\4\0\1\65\1\0"+
    "\1\65\23\0\10\65\1\0\6\65\2\0\1\215\3\65"+
    "\1\0\1\65\6\0\4\65\1\0\3\65\1\0\1\65"+
    "\1\71\1\65\1\0\1\65\2\0\1\166\4\0\1\65"+
    "\1\0\1\65\23\0\1\65\1\167\1\65\1\170\4\65"+
    "\1\140\6\65\2\0\1\216\114\0\1\142\31\0\1\217"+
    "\73\0\1\144\107\0\1\144\14\0\1\145\110\0\1\146"+
    "\104\0\1\72\51\0\4\44\10\0\4\44\1\0\1\44"+
    "\5\0\1\44\1\0\1\44\2\0\1\44\4\0\1\44"+
    "\1\0\1\44\10\0\1\44\12\0\10\44\1\0\6\44"+
    "\2\0\4\6\1\75\1\65\6\0\1\66\3\6\1\0"+
    "\1\6\1\67\1\77\1\0\1\65\1\71\1\6\1\0"+
    "\1\6\1\73\1\0\1\6\4\0\1\66\1\0\1\6"+
    "\10\0\1\44\12\0\3\6\1\152\4\6\1\0\5\6"+
    "\1\66\2\0\4\6\1\75\1\65\6\0\1\66\3\6"+
    "\1\0\1\6\1\220\1\77\1\0\1\65\1\71\1\6"+
    "\1\0\1\6\1\73\1\0\1\6\4\0\1\66\1\0"+
    "\1\6\10\0\1\44\12\0\10\6\1\0\5\6\1\66"+
    "\2\0\4\6\1\75\1\65\6\0\1\66\3\6\1\0"+
    "\1\6\1\67\1\77\1\0\1\65\1\71\1\6\1\0"+
    "\1\6\1\73\1\0\1\6\4\0\1\66\1\0\1\6"+
    "\10\0\1\44\12\0\10\6\1\0\2\6\1\152\2\6"+
    "\1\66\2\0\1\165\3\65\1\0\1\65\6\0\3\65"+
    "\1\221\1\0\3\65\1\0\1\65\1\71\1\65\1\0"+
    "\1\65\2\0\1\166\4\0\1\65\1\0\1\65\23\0"+
    "\1\65\1\167\1\65\1\170\4\65\1\155\6\65\21\0"+
    "\1\222\70\0\4\6\1\75\1\65\6\0\1\66\3\6"+
    "\1\0\1\6\1\223\1\77\1\0\1\65\1\71\1\6"+
    "\1\0\1\6\1\73\1\0\1\6\4\0\1\66\1\0"+
    "\1\6\10\0\1\44\12\0\7\6\1\152\1\224\5\6"+
    "\1\66\2\0\1\161\66\0\1\201\1\163\5\0\1\225"+
    "\13\0\1\226\175\0\1\163\113\0\1\227\13\0\4\65"+
    "\1\0\1\65\6\0\4\65\1\0\3\65\1\0\1\65"+
    "\1\71\1\65\1\0\1\65\2\0\1\65\4\0\1\65"+
    "\1\0\1\65\23\0\1\230\7\65\1\0\6\65\2\0"+
    "\4\65\1\0\1\65\6\0\4\65\1\0\3\65\1\0"+
    "\1\65\1\71\1\65\1\0\1\65\2\0\1\65\4\0"+
    "\1\65\1\0\1\65\23\0\5\65\1\231\2\65\1\0"+
    "\6\65\2\0\4\65\1\0\1\65\6\0\4\65\1\0"+
    "\3\65\1\0\1\65\1\71\1\65\1\0\1\65\2\0"+
    "\1\65\4\0\1\65\1\0\1\65\23\0\1\232\1\65"+
    "\1\230\5\65\1\0\6\65\2\0\4\65\1\0\1\65"+
    "\6\0\4\65\1\0\3\65\1\0\1\65\1\71\1\65"+
    "\1\0\1\65\2\0\1\233\4\0\1\65\1\0\1\65"+
    "\23\0\10\65\1\0\6\65\2\0\4\171\10\0\4\171"+
    "\1\0\1\171\1\234\1\171\3\0\1\171\1\0\1\171"+
    "\2\0\1\171\4\0\1\171\1\0\1\171\23\0\10\171"+
    "\1\0\6\171\2\0\4\65\1\0\1\65\6\0\4\65"+
    "\1\0\1\65\1\235\1\65\1\0\1\65\1\71\1\65"+
    "\1\0\1\65\2\0\1\65\4\0\1\65\1\0\1\65"+
    "\23\0\4\65\1\236\1\231\2\65\1\175\6\65\2\0"+
    "\4\65\1\0\1\65\6\0\4\65\1\0\3\65\1\0"+
    "\1\65\1\71\1\65\1\0\1\236\2\0\1\65\4\0"+
    "\1\65\1\0\1\65\23\0\10\65\1\0\1\236\5\65"+
    "\2\0\1\165\3\65\1\0\1\65\6\0\4\65\1\0"+
    "\3\65\1\0\1\65\1\71\1\65\1\0\1\65\2\0"+
    "\1\166\4\0\1\65\1\0\1\65\23\0\1\65\1\167"+
    "\1\65\1\170\1\236\3\65\1\175\6\65\75\0\1\237"+
    "\36\0\1\240\50\0\1\237\3\0\1\175\41\0\1\237"+
    "\46\0\1\237\7\0\1\241\3\6\1\242\1\65\6\0"+
    "\1\66\3\6\1\0\1\6\1\67\1\77\1\0\1\65"+
    "\1\71\1\6\1\0\1\6\1\73\1\0\1\6\4\0"+
    "\1\66\1\0\1\6\10\0\1\44\12\0\10\6\1\0"+
    "\5\6\1\66\2\0\4\65\1\0\1\65\6\0\4\65"+
    "\1\0\3\65\1\0\1\65\1\71\1\65\1\0\1\65"+
    "\2\0\1\65\4\0\1\65\1\0\1\65\23\0\5\65"+
    "\1\236\2\65\1\0\6\65\2\0\1\165\3\65\1\0"+
    "\1\65\6\0\4\65\1\0\3\65\1\0\1\65\1\71"+
    "\1\65\1\0\1\65\2\0\1\172\4\0\1\65\1\0"+
    "\1\65\23\0\1\65\1\167\1\65\1\170\4\65\1\206"+
    "\6\65\36\0\1\176\147\0\1\237\13\0\4\6\1\75"+
    "\1\65\6\0\1\66\3\6\1\0\1\6\1\243\1\77"+
    "\1\0\1\65\1\71\1\6\1\0\1\6\1\73\1\0"+
    "\1\6\4\0\1\66\1\0\1\6\10\0\1\44\12\0"+
    "\10\6\1\0\5\6\1\66\2\0\1\211\2\66\1\211"+
    "\1\75\1\65\6\0\2\66\1\211\1\66\1\0\1\66"+
    "\1\65\1\77\1\0\1\65\1\71\1\66\1\0\1\66"+
    "\1\73\1\104\1\66\1\0\1\104\2\0\1\66\1\104"+
    "\1\66\10\0\1\44\12\0\10\66\1\0\6\66\2\0"+
    "\1\165\3\65\1\0\1\65\6\0\4\65\1\0\3\65"+
    "\1\0\1\65\1\71\1\65\1\0\1\65\2\0\1\166"+
    "\4\0\1\65\1\0\1\65\23\0\1\65\1\167\1\65"+
    "\1\170\4\65\1\213\4\65\1\236\1\65\106\0\1\237"+
    "\3\0\4\65\1\0\1\65\6\0\4\65\1\0\1\65"+
    "\1\244\1\65\1\0\1\65\1\71\1\65\1\0\1\65"+
    "\2\0\1\65\4\0\1\65\1\0\1\65\23\0\1\230"+
    "\7\65\1\213\4\65\1\236\1\65\24\0\1\245\54\0"+
    "\1\213\4\0\1\237\42\0\1\217\50\0\4\65\1\0"+
    "\1\65\6\0\4\65\1\0\3\65\1\0\1\65\1\71"+
    "\1\65\1\0\1\65\2\0\1\65\4\0\1\65\1\0"+
    "\1\65\23\0\10\65\1\0\2\65\1\236\3\65\104\0"+
    "\1\237\5\0\1\165\3\65\1\0\1\65\6\0\4\65"+
    "\1\0\3\65\1\0\1\65\1\71\1\65\1\0\1\65"+
    "\2\0\1\166\4\0\1\65\1\0\1\65\23\0\1\65"+
    "\1\167\1\65\1\170\3\65\1\236\1\224\6\65\100\0"+
    "\1\237\14\0\1\246\104\0\1\161\67\0\1\247\17\0"+
    "\4\65\1\0\1\65\6\0\4\65\1\0\3\65\1\0"+
    "\1\65\1\71\1\65\1\0\1\65\2\0\1\65\4\0"+
    "\1\65\1\0\1\65\23\0\6\65\1\230\1\65\1\0"+
    "\6\65\2\0\1\65\1\230\2\65\1\0\1\65\6\0"+
    "\4\65\1\0\3\65\1\0\1\65\1\71\1\65\1\0"+
    "\1\65\2\0\1\65\4\0\1\65\1\0\1\65\23\0"+
    "\10\65\1\0\6\65\2\0\4\65\1\0\1\65\6\0"+
    "\4\65\1\0\3\65\1\0\1\65\1\71\1\65\1\0"+
    "\1\65\2\0\1\65\4\0\1\65\1\0\1\65\23\0"+
    "\4\65\1\230\3\65\1\0\6\65\2\0\4\250\10\0"+
    "\1\171\3\250\1\0\1\250\1\234\1\171\3\0\1\250"+
    "\1\0\1\250\2\0\1\250\4\0\1\171\1\0\1\250"+
    "\23\0\10\250\1\0\5\250\1\171\2\0\4\65\1\0"+
    "\1\65\6\0\4\65\1\0\3\65\1\0\1\65\1\71"+
    "\1\65\1\0\1\65\2\0\1\65\4\0\1\65\1\0"+
    "\1\65\23\0\4\65\1\236\3\65\1\175\6\65\2\0"+
    "\4\65\1\0\1\65\6\0\4\65\1\0\1\65\1\251"+
    "\1\65\1\0\1\65\1\71\1\65\1\0\1\65\2\0"+
    "\1\65\4\0\1\65\1\0\1\65\23\0\10\65\1\0"+
    "\6\65\24\0\1\161\160\0\1\237\3\0\1\175\10\0"+
    "\4\6\1\242\1\65\6\0\1\66\3\6\1\0\1\6"+
    "\1\67\1\77\1\0\1\65\1\71\1\6\1\0\1\6"+
    "\1\73\1\0\1\6\4\0\1\66\1\0\1\6\10\0"+
    "\1\44\12\0\10\6\1\0\5\6\1\66\2\0\1\161"+
    "\17\0\1\252\46\0\1\162\1\163\5\0\1\164\11\0"+
    "\4\253\1\0\1\65\6\0\4\253\1\0\1\253\1\65"+
    "\1\253\1\0\1\65\1\71\1\253\1\0\1\253\2\0"+
    "\1\253\4\0\1\253\1\0\1\253\23\0\10\253\1\0"+
    "\6\253\2\0\4\65\1\0\1\65\6\0\4\65\1\0"+
    "\3\65\1\0\1\65\1\71\1\65\1\0\1\65\2\0"+
    "\1\65\4\0\1\65\1\0\1\65\23\0\10\65\1\213"+
    "\4\65\1\236\1\65\101\0\1\213\4\0\1\237\7\0"+
    "\1\254\201\0\1\163\11\0\4\255\10\0\1\171\3\255"+
    "\1\0\1\255\1\234\1\171\3\0\1\255\1\0\1\255"+
    "\2\0\1\255\4\0\1\171\1\0\1\255\23\0\10\255"+
    "\1\0\5\255\1\171\22\0\1\256\67\0\4\253\1\257"+
    "\1\65\6\0\4\253\1\260\1\253\1\243\1\253\1\0"+
    "\1\65\1\71\1\253\1\0\1\253\2\0\1\253\4\0"+
    "\1\253\1\0\1\253\23\0\10\253\1\0\6\253\2\0"+
    "\4\261\1\0\1\261\6\0\4\261\1\0\1\261\1\0"+
    "\1\261\3\0\1\261\1\0\1\261\2\0\1\261\4\0"+
    "\1\261\1\0\1\261\23\0\10\261\1\0\6\261\2\0"+
    "\4\262\10\0\1\171\3\262\1\0\1\262\1\234\1\171"+
    "\3\0\1\262\1\0\1\262\2\0\1\262\4\0\1\171"+
    "\1\0\1\262\23\0\10\262\1\0\5\262\1\171\2\0"+
    "\4\263\10\0\4\263\1\0\1\263\1\0\1\263\3\0"+
    "\1\263\1\0\1\263\2\0\1\263\4\0\1\263\1\0"+
    "\1\263\23\0\10\263\1\0\6\263\16\0\1\264\24\0"+
    "\1\264\43\0\1\264\2\0\6\260\6\0\16\260\1\0"+
    "\4\260\2\0\3\260\1\0\1\260\1\0\1\260\17\0"+
    "\10\260\1\0\6\260\2\0\4\261\1\0\1\261\1\265"+
    "\5\0\4\261\1\0\1\261\1\0\1\261\3\0\1\261"+
    "\1\0\1\261\2\0\1\261\4\0\1\261\1\0\1\261"+
    "\23\0\10\261\1\0\6\261\2\0\4\266\10\0\1\171"+
    "\3\266\1\0\1\266\1\234\1\171\3\0\1\266\1\0"+
    "\1\266\2\0\1\266\4\0\1\171\1\0\1\266\23\0"+
    "\10\266\1\0\5\266\1\171\2\0\4\263\1\257\7\0"+
    "\4\263\1\260\1\263\1\256\1\263\3\0\1\263\1\0"+
    "\1\263\2\0\1\263\4\0\1\263\1\0\1\263\23\0"+
    "\10\263\1\0\6\263\16\0\1\264\3\0\1\260\20\0"+
    "\1\264\43\0\1\264";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\26\1\1\11\10\1\3\11"+
    "\6\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\11\4\0\3\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\3\0\3\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\3\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\4\1\2\0\1\1\2\0"+
    "\1\11\1\0\2\1\13\0\4\1\4\0\2\1\2\0"+
    "\1\1\2\0\2\1\4\0\1\1\1\0\2\1\5\0"+
    "\2\1\1\0\1\1\7\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public ArrayList<Token> readSentence() throws IOException {
    ArrayList<Token> sentence = new ArrayList<Token>();
    Token token, lastNonSpace = null, lastSpace = null;

    while((token = yylex()) != null) {
        if(token.isSpace()) {
            if(token.type == Token.TOK_NEWLINES) {
                if(!sentence.isEmpty()) return sentence;
            }
            lastSpace = token;
        } else {
            if(!sentence.isEmpty()) {
                if(lastNonSpace != null &&
                   lastNonSpace.value.endsWith(".") &&
                   lastNonSpace.value.length() > 1 &&
                   token.isCapitalized())
                {
                    yypushback(yylength());
                    return sentence;
                } else if(token.type == Token.TOK_SENT_FINAL) {
                    if(lastNonSpace != null &&
                       lastNonSpace.value.length() == 1 &&
                       lastNonSpace.isCapitalized())
                    {
                    } else {
                        sentence.add(token);
                        return sentence;
                    }
                }
            }
            sentence.add(token);
            lastNonSpace = token;
        }
    }
    if(sentence.isEmpty()) return null;
    return sentence;
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SwedishTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SwedishTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 380) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return(new Token(Token.TOK_LATIN,yytext(),yychar));
          }
        case 21: break;
        case 10: 
          { return(new Token(Token.TOK_ARABIC,yytext(),yychar));
          }
        case 22: break;
        case 20: 
          { yychar = -yylength();
                      sentID = yytext().substring(6, yylength()-1);
          }
        case 23: break;
        case 7: 
          { return(new Token(Token.TOK_SENT_FINAL,yytext(),yychar));
          }
        case 24: break;
        case 18: 
          { return(new Token(Token.TOK_URL,yytext(),yychar));
          }
        case 25: break;
        case 1: 
          { return(new Token(Token.TOK_UNKNOWN,yytext(),yychar));
          }
        case 26: break;
        case 6: 
          { return(new Token(Token.TOK_NUMBER,yytext(),yychar));
          }
        case 27: break;
        case 16: 
          { return(new Token(Token.TOK_SPACES,yytext(),yychar));
          }
        case 28: break;
        case 14: 
          { return(new Token(Token.TOK_HANZI,yytext(),yychar));
          }
        case 29: break;
        case 12: 
          { return(new Token(Token.TOK_KANA,yytext(),yychar));
          }
        case 30: break;
        case 13: 
          { return(new Token(Token.TOK_HANGUL,yytext(),yychar));
          }
        case 31: break;
        case 5: 
          { return(new Token(Token.TOK_NEWLINE,yytext(),yychar));
          }
        case 32: break;
        case 8: 
          { return(new Token(Token.TOK_DASH,yytext(),yychar));
          }
        case 33: break;
        case 15: 
          { return(new Token(Token.TOK_SMILEY,yytext(),yychar));
          }
        case 34: break;
        case 19: 
          { return(new Token(Token.TOK_EMAIL,yytext(),yychar));
          }
        case 35: break;
        case 2: 
          { return(new Token(Token.TOK_SYMBOL,yytext(),yychar));
          }
        case 36: break;
        case 17: 
          { return(new Token(Token.TOK_NEWLINES,yytext(),yychar));
          }
        case 37: break;
        case 11: 
          { return(new Token(Token.TOK_NAGARI,yytext(),yychar));
          }
        case 38: break;
        case 9: 
          { return(new Token(Token.TOK_GREEK,yytext(),yychar));
          }
        case 39: break;
        case 4: 
          { return(new Token(Token.TOK_SPACE,yytext(),yychar));
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
